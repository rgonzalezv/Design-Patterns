The Observer pattern works well when no coordination between the observers is necessary and the observes relationship goes one way.

For example, let objects B and C observe object A. 
When object A fires event X, then object B should execute method Y() and object C should execute method Z(). If methods B.Y() and C.Z() 
are totally independent and require no coordination, then go ahead and use the observer pattern.

On the other hand, if B.Y() must be executed before C.Z() then you will want to use the Mediator pattern where the mediator encapsulates 
this coordination. In this scenario, mediator M would observe object A and would have references to objects B and C. 
When A fires event X, M will handle the event and call B.Y() and C.Z() in the prescribed order.

Also, if objects A, B and C need to observe each other then using a mediator as an intermediary will go a long way to decouple these objects and 
avoid spaghetti code.

