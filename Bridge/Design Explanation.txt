At first sight, the Bridge pattern looks a lot like the Adapter pattern in that a class is used to convert one kind of interface to another. 
However, the intent of the Adapter pattern is to make one or more classes' interfaces look the same as that of a particular class. 
The Bridge pattern is designed to separate a class's interface from its implementation so you can vary or replace the implementation without 
changing the client code.


Bridge pattern:

It is a structural pattern
Abstraction and implementation are not bound at compile time
Abstraction and implementation - both can vary without impact in client
Uses composition over inheritance.
Use the Bridge pattern when:

You want run-time binding of the implementation,
You have a proliferation of classes resulting from a coupled interface and numerous implementations,
You want to share an implementation among multiple objects,
You need to map orthogonal class hierarchies.


Before Bridge Pattern:

                   ----Shape---
                  /            \
         Rectangle              Circle
        /         \            /      \
BlueRectangle  RedRectangle BlueCircle RedCircle

After Bridge Pattern: