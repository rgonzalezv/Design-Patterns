With this pattern, you create a chain of objects that examine a request. 
Each in turn examines the request and either handles it or passes it to the next object in the chain.

Benefits

- decouples the sender of the request and its receivers
- simplifies the object because it doesn have to know the chain structure and keep references to its members
- allows the dynamic adding or removal of responsibility by changing the order or members of the chain


Drawbacks

- execution of the request isn't garanteed, it may fall off the chain if no object handles it
- runtime characteristics can be hard to observe and debug


Potential Use cases

- mouse clicks and keyboard events.
- email. For example, email is received and passed to the first handler, the spam handler. It is then either processed or passed to the second handler, etc.

-------------------------------------------------------------

- the chain contains multiple instances, and each of them performs a different action
- each instance in the chain can choose to propagate to the next instance, or stop the flow

So, with servlet filters, you can have

- a filter that checks if the user is authenticated. If he is, the filter propagates to the next filter

- the next filter checks if the user has permissions to the current resource. If it does, it propagate to the next

- the next logs the current request URL and the username, and always propagate to the next

- there is nothing else in the chain, so the target object is finally invoked