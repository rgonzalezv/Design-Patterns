Flyweight pattern try to reuse already existing similar kind objects by storing them and creates new object when no matching object is found.

First of all they belong to different categories: Prototype is creational one, Flyweight is structural one.

In Prototype objects' creation go through cloning, it ease object's creation. By making a request for cloning we create new cloned object each time.

In Flyweight by making a request we try to reuse as much objects as possible by sharing them. New required object will be created if we don't find such one. 
It's being done for resource optimization.

While in Prototype we could clone even one object, Flyweight pattern makes sense to use when in the application we use big number of objects.

General information:

Using static fields, there can only ever be one instance of the object in use at any one point in time. 
Using the flyweight pattern, you can have any number of different instances in use simultaneously, (each one of which is used multiple times). 
The canonical example of the flyweight pattern is for a text editor, where you need an object instantiated for each and every character in the document. 
Instead of having one object in memory for each character in a 10,000 word document, you then only need 26 objects, 
(assuming document only uses lower case letters), one for the letter 'a', one for the letter 'b', etc., 
and they are reused, transiently, over and over again throughout the document, 
each time you need to perform some function or action requiring an 'a' object.
